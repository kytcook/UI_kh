npm init -y -> packag.json 파일 생성

const http = reqire('http') 를 기반으로 제공되는 웹프레임워크가 expressjs이다.
서버 사이드와 클라이언트 사이드 구분을 할 수 있어야 한다.

npm i express --save
--save 옵션을 통해서 설치된 Node모듈은 package.json 파일내의 dependencies 목록에 추가됨
dependencies에 등록됨

코드가 수정될 때 마다 다시 실행이 된다.
npm i --save-dev nodemon 개발자 옵션

package.json에 아래 내용 추가 실행할땐 npm run server 엔터함
  "scripts": {
    "server":"nodemon render.js"
  },

  미들웨어 정의
  익스프레스가 실행되면서(node render or noderender.js or nodemon render or nodemon render.js)되면서
  어떤 하나의 request(post방식 req.body json정보 읽기, 사용자가 입력한 값 요청)가 들어왔을 때
  그 reques가 응답이 되어 나갈(화면 출력) 때 까지 거치는 모든 함수들을 말함.
  여러 함수들을 거치는 구조를 갖음
  그 함수 하나하나가 미들웨어임
  
  익스프레스 F/W(FrameWork)을 활용하면 서버사이드 렌더링과 클라이언트 사이드 렌더링이 가능함.
  Restful API - GET/POST 방식으로 웹서비스에서는 모든걸 처리하게 될 것이다.

  웹 서비스에 대한 url디자인 패턴 - 터짐플젝
  화면 디자인을 그린다 +@ html로 되어있는것, 부트스트랩 되어있는것을 리액트버전으로 컨버전, 리팩토링 해볼 수 있으면 좋겠다..?

  javascript - single thread - 동기처리-> 비동기가 월등함
  nodejs -> multi thread

  웹서비스에 대한 url디자인 패턴 - 터짐플젝
  응답이 완료됨 -> 오라클서버를 경유, naver서버 경유, hackernews서버 경유, youtube 서버 경유
  요청하기 위해서 get(param1, param2) // get이라는 메소드는 파라미터가 2개다
  http://localhost:3000
  http://localhost:3000/tomato
  http://localhost:3000/tomato/123
  http://localhost:3000/tomato/login?mem_id=apple&mem_pw=123
  url정보를 가지고 요청하는 건 싹 다 get(디폴트)방식 - 단위테스트가 가능하다.
  UI솔루션들은 default가 post방식 - 단위테스트가 불가능하다. 

  <form id="" action="./login" method="get">    // 이걸 생략해도 get, 디폴트가 get

  </form>

  get방식 - 1개 쿼리스트링 param / app.get("/", function (req,res) => {실행문[if(선택), for, switch] - callback})
  post방식 - 1개
  select
  insert
  update
  delete
  
  res.setContentType("text/html")
  res.setContentType("application/json")
  res.json(); 이름도 더블 쿼테이션, 값 문자열, 숫자
  [] - 배열배열배열
  {} - 객체객체객체
  [{},{},{},....] - JSON
  `$ ` - 변수를 쓰기 위해서 : 데이터의 변화를 감지•추적하기 위해서

  웹 서비스를 위해서는 요청객체와 응답객체가 반드시 필요하다.
  내가 인스턴스화 한다. | 아니다 시스템에서 제공해준다. - 의존성 주입 dependency injection
  
  express.js 에서 주입해줌
  요청객체와 응답객체 주입해줌
  서버사이드  렌더링
  클라이언트 사이드 렌더링
  풀스택 개발자
  프론트개발자 -> 풀스택 개발자